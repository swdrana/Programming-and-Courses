# Exercises 1: Beautiful Spiral
'''
Output a square matrix with a specified side length, and the values in the matrix are distributed in a counterclockwise spiral shape starting form the center for example, side length is 4 the matrix is:

10  9   8   7
11  2   1   6
12  3   4   5
13  14  15  16
'''

n = int(input())
bmat = [[2,1],[3,4]]
i = 2
x = 5
while i<n:
    # right part => bottom to top
    for r in range(i-1, -1, -1):
        bmat[r].append(x)
        x+=1
    # top part ==> right to left 
    top = [t for t in range(x+i, x-1, -1)]
    bmat.insert(0, top)
    x+=i+1

    # left part=> top to bottom
    for r in range(i+1):
        bmat[r].insert(0, x )
        x+=1
    
    # bottom part => left to right
    base = [t for t in range(x, x+i+2)]
    bmat.append(base)
    x+=i+2
    i+=2

for r in bmat:
    for c in r:
        print("{:<4d}".format(c), end=" ")
    print()


'''
নিচে কোডটির ব্যাখ্যা বাংলায় দেওয়া হলো, যেটি একটি **counterclockwise spiral matrix** তৈরি করে।

### সমস্যার সারাংশ

আমাদের একটি স্কোয়ার মেট্রিক্স তৈরি করতে হবে, যেটির আকার `n x n` হবে এবং সেখানে সেলগুলোর মান কনট্রাক্লকওয়াইজ (counterclockwise) স্পাইরাল আকারে ভরতি হবে, যেটি মাঝ থেকে শুরু হবে। উদাহরণস্বরূপ, যদি `n = 4` হয়, তাহলে মেট্রিক্স হবে:

```
10  9  8  7
11  2  1  6
12  3  4  5
13 14 15 16
```

### কোডের ব্যাখ্যা

```python
n = int(input())  # মেট্রিক্সের আকার ইনপুট নেব
bmat = [[2, 1], [3, 4]]  # শুরুতে একটি 2x2 মেট্রিক্স যা কেন্দ্রের অংশ প্রতিনিধিত্ব করবে
i = 2  # মেট্রিক্সের প্রথম সাইডের দৈর্ঘ্য (এটি 2 কেননা প্রথম মেট্রিক্স 2x2)
x = 5  # পরবর্তী সংখ্যাটি যা মেট্রিক্সে বসানো হবে (কারণ 2, 3, 4 ইতিমধ্যে বসানো হয়েছে)
```

এখন, এই কোডের প্রথম অংশে একটি ২x২ মেট্রিক্স তৈরি করা হয়েছে যা হবে:

```
2  1
3  4
```

#### মেট্রিক্স বাড়ানোর ধাপ

এরপর, `while` লুপে মেট্রিক্সটি ধাপে ধাপে বাড়ানো হবে। প্রত্যেক ধাপে ৪টি দিক থেকে সংখ্যা বসানো হবে: ডান দিক (নীচ থেকে উপরে), উপরের দিক (ডান থেকে বামে), বাম দিক (উপরে থেকে নিচে), এবং নিচের দিক (বামে থেকে ডানে)। এই ধাপগুলো আস্তে আস্তে মেট্রিক্সের সাইজ বাড়াবে এবং সংখ্যা গুলো স্পাইরাল আকারে বসাবে।

```python
while i < n:
```

#### 1. ডান দিক (নীচ থেকে উপরে)

```python
# ডান দিক => নীচ থেকে উপরে
for r in range(i-1, -1, -1):
    bmat[r].append(x)  # মেট্রিক্সের ডান দিকের সেলে সংখ্যা বসানো
    x += 1
```

এখানে `r` এর মাধ্যমে ডান দিকের কলামে সংখ্যাগুলি উপরের দিকে বসানো হচ্ছে।

#### 2. উপরের দিক (ডান থেকে বামে)

```python
# উপরের দিক => ডান থেকে বামে
top = [t for t in range(x + i, x - 1, -1)]
bmat.insert(0, top)  # নতুন একটি সারি উপরে বসানো হচ্ছে
x += i + 1
```

এটি উপরের সারিতে সংখ্যাগুলো ডান থেকে বামে বসাচ্ছে এবং সেগুলি মেট্রিক্সের উপরে ইনসার্ট করছে।

#### 3. বাম দিক (উপরে থেকে নিচে)

```python
# বাম দিক => উপরে থেকে নিচে
for r in range(i + 1):
    bmat[r].insert(0, x)  # বাম দিকের সেলে সংখ্যা বসানো
    x += 1
```

এখানে, বাম দিকের কলামে সংখ্যাগুলি উপরের সারি থেকে নিচে বসানো হচ্ছে।

#### 4. নিচের দিক (বামে থেকে ডানে)

```python
# নিচের দিক => বামে থেকে ডানে
base = [t for t in range(x, x + i + 2)]
bmat.append(base)  # নতুন একটি সারি নিচে বসানো হচ্ছে
x += i + 2
```

এটি নিচের সারিতে সংখ্যাগুলি বামে থেকে ডানে বসাচ্ছে এবং সেগুলি মেট্রিক্সের নিচে অ্যাড করছে।

#### মেট্রিক্সের আকার বাড়ানো

এবার, মেট্রিক্সটি পরবর্তী ধাপে যাবার জন্য সাইডের দৈর্ঘ্য `i` বাড়ানো হবে:

```python
i += 2  # পরবর্তী ধাপে মেট্রিক্সের সাইডের দৈর্ঘ্য ২ বাড়ানো হবে
```

এই প্রক্রিয়া চলতে থাকবে যতক্ষণ না মেট্রিক্সটি `n x n` আকারে পরিণত হয়।

#### মেট্রিক্স প্রিন্ট করা

সবশেষে, মেট্রিক্সটি প্রিন্ট করা হবে:

```python
for r in bmat:
    for c in r:
        print("{:<4d}".format(c), end=" ")  # প্রতিটি সেলকে সুন্দরভাবে প্রিন্ট করা
    print()
```

এটি মেট্রিক্সের প্রতিটি সারি এবং কলাম প্রিন্ট করে, প্রতিটি সংখ্যা চারটি স্থান দিয়ে ফরম্যাট করা হয়।

### উদাহরণ: `n = 4`

1. **প্রাথমিক মেট্রিক্স** (2x2):
   ```
   2  1
   3  4
   ```

2. **প্রথম ধাপ (i = 2)**:
   - ডান দিক: `5` যোগ হবে।
   - উপরের দিক: `10, 9, 8, 7` যোগ হবে।
   - বাম দিক: `11, 12` যোগ হবে।
   - নিচের দিক: `13, 14, 15, 16` যোগ হবে।

   এরপর মেট্রিক্সটি হবে:
   ```
   10  9  8  7
   11  2  1  6
   12  3  4  5
   13 14 15 16
   ```

এটি হলো ঠিক সেই স্পাইরাল আকারে, যেটি আমরা আশা করছিলাম।

### ফলস্বরূপ:

যদি ইনপুট `n = 4` দেওয়া হয়, তবে আউটপুট হবে:

```
10  9  8  7
11  2  1  6
12  3  4  5
13 14 15 16
```

### সারাংশ

এই কোডটি একটি স্পাইরাল মেট্রিক্স তৈরি করে যেখানে প্রথমে একটি ছোট মেট্রিক্স তৈরি করা হয়, এবং পরে প্রতিটি ধাপে চারটি দিক থেকে সংখ্যা যোগ করা হয়, একে একে মেট্রিক্সের সাইজ বাড়ানো হয়।
'''